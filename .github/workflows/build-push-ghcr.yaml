name: Reusable workflow to build and push docker container to github container registry

on:
  workflow_call:
    inputs:
      container-name:
        required: true
        type: string
      context:
        required: false
        type: string
        default: '.'
      file:
        required: false
        type: string
        default: 'Dockerfile'
      branch:
        type: string
        default: 'main'
      pr-head-sha:
        required: false
        type: string
      pr-head-ref:
        required: false
        type: string

env:
  REGISTRY: ghcr.io/clubcedille

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.pr-head-ref || inputs.pr-head-sha || '' }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ inputs.container-name }}
          context: git
          tags: |
            type=ref,event=branch
            type=sha
            type=sha,format=long,prefix=
            type=ref,event=pr
            type=raw,value=${{ inputs.pr-head-sha }},enable=${{ inputs.pr-head-sha != '' }}
            type=raw,value=${{ inputs.branch }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ inputs.container-name }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ inputs.container-name }}:buildcache,mode=max
        continue-on-error: true
